define([
	], function() {
		function ModuleRenderer(app) {
			this.app = app;
		}

		ModuleRenderer.prototype.renderModules = function(rackData) {
			var moduleTopContainerElem = document.querySelector('#moduleTopContainer');
			var cellCounter = 0;

			var app = this.app;

			// Gear
			if (rackData.gear != undefined) {
				var gearCounter = 0;
				rackData.gear.forEach(function(gear) {



					// TODO Refactor duplicated code


					var rowElem = document.createElement('div');
					rowElem.className = 'moduleRow';
					rowElem.id = 'gearRow' + gearCounter++;
					moduleTopContainerElem.appendChild(rowElem);

					var gearController = new GearController();
					var definition = { handlebarsTemplateSelector : '#gearTemplate' };
					var models = [ { gearName : gear.gearName } ];
					
					gearController.render(definition, models, '#' + rowElem.id);

					var moduleContainer = rowElem.querySelector('div.moduleContainer');

					// Modules
					gear.moduleCollections.forEach(function(moduleData) {
						var cellElem = document.createElement('div');
						cellElem.id = 'moduleCell' + cellCounter++;
						moduleContainer.appendChild(cellElem);

						// HTML will be generated by Handlebars in controller.render
						var containerSelector = '#' + cellElem.id;

						var modules = [];

						// Create instance of the factory specified
						var factory = new moduleData.factory();

						// Create a module instance with the moduleData
						moduleData.modules.forEach(function(module) {

							// // Special case for Convolver modules
							// // TODO: hacky, find a better way
							// try {
							// 	if (factory instanceof ConvolverModuleFactory)
							// 		module.impulseOptions = app.getImpulseOptions();
							// }
							// catch (e) {
							//    // reference error if ConvolverModuleFactory is not defined. ignored.
							// }

							modules.push(factory.getModule(module));
						});

						// Create instance of the controller specified
						var controller = new moduleData.controller(app.master, app.patcher)

						// render module
						controller.render(factory.getModuleDefinition(), modules, containerSelector);
					});
				});
			}


			// Rows
			rackData.rows.forEach(function(row) {



				// TODO Refactor duplicated code



				
				var rowElem = document.createElement('div');
				rowElem.className = 'moduleRow';
				moduleTopContainerElem.appendChild(rowElem);

				// Modules
				row.moduleCollections.forEach(function(moduleData) {
					var cellElem = document.createElement('div');
					cellElem.id = 'moduleCell' + cellCounter++;
					rowElem.appendChild(cellElem);

					// HTML will be generated by Handlebars in controller.render
					var containerSelector = '#' + cellElem.id;

					var modules = [];

					// Create instance of the factory specified
					var factory = new moduleData.factory();

					// Create a module instance with the moduleData
					moduleData.modules.forEach(function(module) {

						// // Special case for Convolver modules
						// // TODO: hacky, find a better way
						// try {
						// 	if (factory instanceof ConvolverModuleFactory)
						// 		module.impulseOptions = app.getImpulseOptions();
						// }
						// catch (e) {
						//    // reference error if ConvolverModuleFactory is not defined. ignored.
						// }

						modules.push(factory.getModule(module));
					});

					// Create instance of the controller specified
					var controller = new moduleData.controller(app.master, app.patcher);

					// render module
					controller.render(factory.getModuleDefinition(), modules, containerSelector);
				});
			});
		};

		return ModuleRenderer;
	}
);